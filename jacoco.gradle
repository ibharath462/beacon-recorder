apply plugin: 'jacoco'

jacoco {
    toolVersion "0.7.6.201602180812"
}

task combineTestReports(dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    doLast {
        File combined = file("${buildDir}/combined")
        if (combined.exists()) {
            combined.deleteDir()
        }
        combined.mkdirs();

        def testDirs = [file("${buildDir}/test-results/debug/"),
                        file("${buildDir}/outputs/androidTest-results/connected/")];

        testDirs.each { testDir ->
            if (!testDir.exists()) {
                logging.captureStandardOutput LogLevel.WARN
                println "WARNING: ignoring non-existant ${testDir.path}"
                return;
            }
            files(testDir.listFiles()).each { file ->
                new File(combined, file.getName()) << file.text
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      'android/**/*.*',
                      '**/Lambda.class',
                      '**/*Lambda.class',
                      '**/*Lambda*.class',
                      '**/*Lambda*.*',
                      '**/*Builder.*',]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.projectDir, includes:
            ['**/*.exec' , '**/*.ec'])
}
